{
	// Place your advent workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New code file": {
		"scope": "python",
		"prefix": "start-2022",
		"body": [
			"\"\"\"https://adventofcode.com/2022/day/$1\"\"\"",
			"import boilerplate as bp",
			"",
			"TEST_PATH = bp.get_test_path()",
			"DATA_PATH = bp.get_data_path()",
			"",
			"",
			"def load_data(path: str) -> ${2:object}:",
			"    with open(path, \"r\") as f:",
			"        raw = f.read()$3",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		],
		"description": "2022 code template"
	},
	"New day 2 file": {
		"scope": "python",
		"prefix": "day-2",
		"body": [
			"\"\"\"https://adventofcode.com/2022/day/$1\"\"\"",
			"import boilerplate as bp",
			"from day$1_0 import load_data, DATA_PATH, TEST_PATH",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		]
	},
	"New 2023 file": {
		"scope": "python",
		"prefix": "aoc-2023",
		"body": [
			"\"\"\"https://adventofcode.com/2023/day/$1\"\"\"",
			"import boilerplate as bp",
			"",
			"TEST_PATH = bp.get_test_path()",
			"DATA_PATH = bp.get_data_path()",
			"",
			"",
			"def load_data(path: str) -> ${3:...}:",
    		"    with open(path, \"r\") as f:",
			"        ...",
			"    return ...",
			"",
			"",
			"def run(data: $3) -> int:",
			"    return ...",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"    assert run(data) == ${2:...}",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"    print(run(data))",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		]
	},
	"New 2023 day 2 file": {
		"scope": "python",
		"prefix": "aoc-2023-2",
		"body": [
			"\"\"\"https://adventofcode.com/2023/day/$1\"\"\"",
			"from day$1_0 import DATA_PATH, TEST_PATH, load_data",
			"",
			"",
			"def run(data: $3) -> int:",
			"    return ...",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"    assert run(data) == ${2:...}",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"    print(run(data))",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		]
	},
	"New 2024 file": {
		"scope": "python",
		"prefix": "aoc-2024",
		"body": [
			"\"\"\"https://adventofcode.com/2024/day/$1\"\"\"",
			"import boilerplate as bp",
			"",
			"TEST_PATH = bp.get_test_path()",
			"DATA_PATH = bp.get_data_path()",
			"",
			"",
			"def load_data(path: str) -> ${3:...}:",
    		"    with open(path, \"r\") as f:",
			"        raw = f.read().splitlines()",
			"    return ...",
			"",
			"",
			"def run(data: $3) -> int:",
			"    return ...",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"    assert run(data) == ${2:...}",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"    out = run(data)",
			"    bp.write_answer(out)",
			"    print(out)",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		]
	},
	"New 2024 day 2 file": {
		"scope": "python",
		"prefix": "aoc-2024-2",
		"body": [
			"\"\"\"https://adventofcode.com/2024/day/$1\"\"\"",
			"import boilerplate as bp",
			"from day$1_0 import DATA_PATH, TEST_PATH, load_data",
			"",
			"",
			"def run(data: ${3:...}) -> int:",
			"    return ...",
			"",
			"",
			"def test():",
			"    data = load_data(TEST_PATH)",
			"    assert run(data) == ${2:...}",
			"",
			"",
			"def main():",
			"    data = load_data(DATA_PATH)",
			"    out = run(data)",
			"    bp.write_answer(out)",
			"    print(out)",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    test()",
			"    main()"
		]
	}
}